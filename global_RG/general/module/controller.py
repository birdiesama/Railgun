################################################################################
__Script__		= 'global_RG.general.module.controller'
__Author__		= 'Weerapot Chaoman'
__Version__		= 2.00
__Date__		= 20191212
################################################################################
import os, sys
__self_name__   = os.path.basename(__file__)
__self_path__   = ((os.path.realpath(__file__)).replace(__self_name__, '')).replace('\\', '/')
__project__     = 'Railgun'
################################################################################

import pymel.core as pm

class Controller(object):

    def __init__(self, *args, **kwargs):
        super(Controller, self).__init__(*args, **kwargs)

        self.controller_shape_dict = {}
        self.controller_shape_dict['four_directional_arrow'] = [
            (-3, 0, 2), (-2, 0, 3), (-2, 0, 6), (-3, 0, 6),
            (0, 0, 8), (3, 0, 6), (2, 0, 6), (2, 0, 3),
            (3, 0, 2), (6, 0, 2), (6, 0, 3), (8, 0, 0),
            (6, 0, -3), (6, 0, -2), (3, 0, -2), (2, 0, -3),
            (2, 0, -6), (3, 0, -6), (0, 0, -8), (-3, 0, -6),
            (-2, 0, -6), (-2, 0, -3), (-3, 0, -2), (-6, 0, -2),
            (-6, 0, -3), (-8, 0, 0), (-6, 0, 3), (-6, 0, 2),
            (-3, 0, 2),
            ]
        self.controller_shape_dict['offset'] = [
            (1.8369701987210297e-16, 1.815131678425603e-16, -2.964334989793577), (-0.6494304410481335, 1.4664493615189053e-16, -2.3948935522305774),
            (-1.4999999999999996, 1.5719501447304588e-16, -2.5671894064883225), (-1.7742769609253664, 1.0735154393587799e-16, -1.7531837589518915),
            (-2.598076211353316, 9.075658392128016e-17, -1.4821674948967887), (-2.4237074019734997, 3.929339221601267e-17, -0.6417097932786867),
            (-3.0, 5.141849564236658e-32, -8.397277595167219e-16), (-2.4237074019735, -3.9293392216012575e-17, 0.6417097932786854),
            (-2.598076211353317, -9.07565839212801e-17, 1.4821674948967876), (-1.7742769609253677, -1.0735154393587794e-16, 1.7531837589518915),
            (-1.5000000000000013, -1.5719501447304585e-16, 2.567189406488322), (-0.6494304410481354, -1.4664493615189053e-16, 2.3948935522305774),
            (-1.5992313762691777e-15, -1.8151316784256032e-16, 2.9643349897935773), (0.6494304410481329, -1.4664493615189058e-16, 2.394893552230578),
            (1.499999999999999, -1.5719501447304595e-16, 2.567189406488324), (1.7742769609253664, -1.0735154393587804e-16, 1.7531837589518928),
            (2.598076211353316, -9.075658392128027e-17, 1.4821674948967904), (2.4237074019735, -3.929339221601273e-17, 0.6417097932786878),
            (3.0000000000000013, -1.32026534926951e-31, 2.1561569428650447e-15), (2.4237074019735023, 3.9293392216012526e-17, -0.6417097932786844),
            (2.5980762113533187, 9.075658392128007e-17, -1.4821674948967871), (1.7742769609253681, 1.0735154393587794e-16, -1.7531837589518915),
            (1.500000000000003, 1.5719501447304588e-16, -2.5671894064883225), (0.6494304410481364, 1.4664493615189055e-16, -2.394893552230578),
            (2.8482322789724792e-15, 1.8151316784256037e-16, -2.9643349897935782),
            ]
        self.controller_shape_dict['sphere'] = [
            (0.0, 0.4000000059604645, 0.0), (0.0, -0.4000000059604645, 0.0), (0.0, 0.0, 0.0), (-5.960464477539063e-08, 0.0, 0.4000000059604645),
            (2.0265579792067e-07, 0.0, -0.3999999761581421), (0.0, 0.0, 0.0), (-0.4000000059604645, 0.0, -1.4305115314527939e-07),
            (0.4000000059604645, 0.0, 0.0), (0.25, 0.0, 0.0), (0.24519631266593933, 0.04877258837223053, 0.0), (0.2309698760509491, 0.09567085653543472, 0.0),
            (0.20786741375923157, 0.1388925462961197, 0.0), (0.1767766922712326, 0.1767766922712326, 0.0), (0.13889256119728088, 0.20786739885807037, 0.0),
            (0.09567086398601532, 0.2309698760509491, 0.0), (0.04877258092164993, 0.24519631266593933, 0.0), (0.0, 0.25, 0.0),
            (2.471011484317387e-08, 0.24519631266593933, -0.048772577196359634), (4.847063550528219e-08, 0.2309698760509491, -0.09567085653543472),
            (7.036845772745437e-08, 0.20786739885807037, -0.1388925462961197), (8.956205022059294e-08, 0.1767766922712326, -0.1767766773700714),
            (1.053138376505558e-07, 0.1388925462961197, -0.20786739885807037), (1.1701845892275742e-07, 0.09567085653543472, -0.2309698611497879),
            (1.242261333800343e-07, 0.04877258837223053, -0.24519629776477814), (1.2665987014770508e-07, 0.0, -0.2499999850988388),
            (1.242261333800343e-07, -0.04877258837223053, -0.24519629776477814), (1.1701845892275742e-07, -0.09567085653543472, -0.2309698611497879),
            (1.053138376505558e-07, -0.1388925462961197, -0.20786739885807037), (8.956205022059294e-08, -0.1767766922712326, -0.1767766773700714),
            (7.036845772745437e-08, -0.20786739885807037, -0.1388925462961197), (4.847063550528219e-08, -0.2309698760509491, -0.09567085653543472),
            (2.471011484317387e-08, -0.24519631266593933, -0.048772577196359634), (0.0, -0.25, 0.0), (0.04877258092164993, -0.24519631266593933, 0.0),
            (0.09567086398601532, -0.2309698760509491, 0.0), (0.13889256119728088, -0.20786739885807037, 0.0), (0.1767766922712326, -0.1767766922712326, 0.0),
            (0.20786741375923157, -0.1388925462961197, 0.0), (0.2309698760509491, -0.09567085653543472, 0.0), (0.24519631266593933, -0.04877258837223053, 0.0),
            (0.25, 0.0, 0.0), (0.23096993565559387, 0.0, -0.09567072242498398), (0.17677678167819977, 0.0, -0.17677658796310425),
            (0.09567097574472427, 0.0, -0.23096981644630432), (1.2665987014770508e-07, 0.0, -0.2499999850988388), (-0.09567074477672577, 0.0, -0.23096992075443268),
            (-0.17677661776542664, 0.0, -0.17677676677703857), (-0.2309698462486267, 0.0, -0.09567094594240189), (-0.25, 0.0, -8.940696716308594e-08),
            (-0.24519631266593933, 0.04877258837223053, -8.768903114741988e-08), (-0.2309698760509491, 0.09567085653543472, -8.260126094228326e-08),
            (-0.20786741375923157, 0.1388925462961197, -7.433918369770254e-08), (-0.1767766922712326, 0.1767766922712326, -6.322026990801533e-08),
            (-0.13889256119728088, 0.20786739885807037, -4.9671850632648784e-08), (-0.09567086398601532, 0.2309698760509491, -3.421456540309009e-08),
            (-0.04877258092164993, 0.24519631266593933, -1.744243505186205e-08), (0.0, 0.25, 0.0), (-7.2676806794902404e-09, 0.24519631266593933, 0.04877258092164993),
            (-1.4256070102192098e-08, 0.2309698760509491, 0.09567086398601532), (-2.0696603542091907e-08, 0.20786739885807037, 0.13889256119728088),
            (-2.6341780312577612e-08, 0.1767766922712326, 0.1767766922712326), (-3.097465750556694e-08, 0.1388925462961197, 0.20786741375923157),
            (-3.441719442776048e-08, 0.09567085653543472, 0.2309698760509491), (-3.653709867990074e-08, 0.04877258837223053, 0.24519631266593933),
            (-3.725290298461914e-08, 0.0, 0.25), (-3.653709867990074e-08, -0.04877258837223053, 0.24519631266593933),
            (-3.441719442776048e-08, -0.09567085653543472, 0.2309698760509491), (-3.097465750556694e-08, -0.1388925462961197, 0.20786741375923157),
            (-2.6341780312577612e-08, -0.1767766922712326, 0.1767766922712326), (-2.0696603542091907e-08, -0.20786739885807037, 0.13889256119728088),
            (-1.4256070102192098e-08, -0.2309698760509491, 0.09567086398601532), (-7.2676806794902404e-09, -0.24519631266593933, 0.04877258092164993),
            (0.0, -0.25, 0.0), (-0.04877258092164993, -0.24519631266593933, -1.744243505186205e-08), (-0.09567086398601532, -0.2309698760509491, -3.421456540309009e-08),
            (-0.13889256119728088, -0.20786739885807037, -4.9671850632648784e-08), (-0.1767766922712326, -0.1767766922712326, -6.322026990801533e-08),
            (-0.20786741375923157, -0.1388925462961197, -7.433918369770254e-08), (-0.2309698760509491, -0.09567085653543472, -8.260126094228326e-08),
            (-0.24519631266593933, -0.04877258837223053, -8.768903114741988e-08), (-0.25, 0.0, -8.940696716308594e-08), (-0.23096990585327148, 0.0, 0.09567078202962875),
            (-0.1767767369747162, 0.0, 0.17677664756774902), (-0.0956709012389183, 0.0, 0.2309698611497879), (-3.725290298461914e-08, 0.0, 0.25),
            (0.09567082673311234, 0.0, 0.2309698909521103), (0.1767766773700714, 0.0, 0.1767767071723938), (0.2309698760509491, 0.0, 0.09567086398601532),
            (0.25, 0.0, 0.0),
            ]

        self.controller_color_dict = {}
        self.controller_color_dict['none'] = (0, 0 ,0)
        self.controller_color_dict['white'] = (1, 1, 1)
        self.controller_color_dict['red'] = (1, 0, 0)
        self.controller_color_dict['blue'] = (0, 0, 1)
        self.controller_color_dict['green'] = (0, 1, 0)
        self.controller_color_dict['yellow'] = (1, 1, 0)
        self.controller_color_dict['light_blue'] = (0, 1, 1)
        self.controller_color_dict['brown'] = (0.3, 0.1, 0.1)

    def controller_set_color(self, target, en=True, color=(0, 0, 0)):
        target = pm.PyNode(target)
        target_shape = target.getShape(type = 'nurbsCurve')
        if target_shape:
            target_shape.overrideEnabled.set(en)
            target_shape.overrideRGBColors.set(en)
            target_shape.overrideColorRGB.set(color)

    def controller_create(self, type, name=None, color=None, scale=None):
        curve = pm.curve(d = 1, p = self.controller_shape_dict[type])
        if name:
            curve.rename(name)
        if color:
            self.controller_set_color(curve, en = True, color = self.controller_color_dict[color])
        if scale:
            for axis in ['x', 'y', 'z']:
                pm.setAttr(curve.nodeName() + '.s' + axis, scale)
        self.freeze_transform(curve)
        self.delete_history(curve)
        return curve

    def space_scale_to_ctrl_scale(self, space_scale):
        controller_scale_proxy = list(str(space_scale))
        controller_scale_proxy = list(reversed(controller_scale_proxy))
        controller_scale = ''
        for proxy in controller_scale_proxy:
            controller_scale += proxy
        controller_scale = float(controller_scale)
        return controller_scale
